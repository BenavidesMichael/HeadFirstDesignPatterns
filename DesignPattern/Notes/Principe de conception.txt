1. Identifiez les aspects de votre application qui varient et séparez-les de ceux qui demeurent constants

2. Programmer une interface, non une implémentation.

3. Préférez la composition à l’héritage
	- Permet d’encapsuler une famille d’algorithmes dans leur propre ensemble de classes,
		On peut également modifier le comportement au moment de l’exécution.
	- Lorsque vous assemblez deux classes : La relation << A-UN >> 
		ex : chaque canard a un ComportementVol.

4. Efforcez-vous de coupler faiblement les objets qui interagissent.
	- libres de les modifier à notre guise
	- Les modifications des sujets n’affectent pas les observateurs et inversement.
	- nous permettent de construire des systèmes OO souples, capables de faire face aux changements.
	- minimisent l’interdépendance entre les objets